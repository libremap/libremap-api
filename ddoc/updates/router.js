function (doc, req) {
  /*
    POST   /router/     create new document with generated id
    PUT    /router/:id  if :id is not a valid doc id: create doc with this id
    PUT    /router/:id  otherwise: update doc
    DELETE /router/:id  delete id
  */

  var common = require('views/lib/common');

  function err(code, msg) {
    return [null, {code: code, body: toJSON({'error': msg})}];
  }

  // update document
  if (req.method=="PUT" && doc) {
    if (!doc) {
      return err(404, 'document not found');
    }

    var newdoc = JSON.parse(req.body);
    // set timestamps
    newdoc.mtime = common.getDate();

    return [newdoc, {
        code: 201,
        body: toJSON({'ok': true, "id": newdoc._id})
      }];

  // create document (doc does not exist)
  } else if ((req.method=="PUT" && !doc) || req.method=="POST") {
    var newdoc = JSON.parse(req.body);
    if (req.method=="PUT") {
      if (!req.id) {
        return err(400, 'PUT requires id in URL');
      }
      if (!newdoc._id) {
        newdoc._id = req.id;
      }
      if (newdoc._id && newdoc._id!=req.id) {
        return err(415, 'id mismatch');
      }
    }
    if (req.method=="POST") {
      if (req.id || newdoc._id) {
        return err(400, 'POST uses autogenerated id');
      }
      newdoc._id = req.uuid;
    }

    // check type
    if (newdoc.type != 'router') {
      return err(415, 'type!=router');
    }

    // set timestamps
    var time = common.getDate();
    newdoc.ctime = time;
    newdoc.mtime = time;

    return [newdoc, {
        code: 201,
        body: toJSON({'ok': true, "id": newdoc._id})
      }];

  // delete document
  } else if (req.method=="DELETE") {
    if (!doc) {
      return err(404, 'document not found');
    }
    if (doc._rev==req.query.rev) {
      doc._deleted = true;
      return [doc, {code: 200, body: toJSON({'ok': true})}];
    }
    return err(409, 'rev mismatch');

  // fail
  } else {
    return err(405, 'method '+req.method+' not handled.');
  }

  return err(500, 'update handler failed, is this a bug?');
}
